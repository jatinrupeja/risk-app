/**
 *
 */
package Game.View;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Map;

import Game.Controller.ReinforcementController;
import Game.Model.Player;
import Game.Risk.DataHolder;

/**
 * Full Game Play Panel consist of Game Logs, Map, Dice info, Player Info,
 * Reinforcement, Attack and Fortification controls.
 *
 * @author Jay, ndkcha
 */
public class RiskMainInterface extends JFrame {
    public static final String REINFORCEMENT_ADD_ARMY_ACTION = "reinforcement:add";
    public static final String SWITCH_PHASE = "switch:phase";
    private DataHolder holder = DataHolder.getInstance();

    /**
     * MainView object.
     */
    private static RiskMainInterface mainView;

    /**
     * PlayerInfoView class object.
     */
    private Views playerData;

    private BufferedImage mapImage;


    // Variables declaration - do not modify                     
    private javax.swing.JButton Card_A_button;
    private javax.swing.JButton Card_B_button;
    private javax.swing.JButton Card_C_button;
    private javax.swing.JButton Card_D_button;
    private javax.swing.JButton Card_E_button;
    private javax.swing.JPanel Card_panel;
    private javax.swing.JComboBox<String> Country_combo;
    private javax.swing.JButton DiceValue;
    private javax.swing.JList<String> Dice_Jlist;
    private javax.swing.JPanel Dice_Panel;
    private javax.swing.JList<String> Gameplay_Jlist;
    private javax.swing.JPanel Gameplay_panel;
    private javax.swing.JPanel Image_Panel;
    private javax.swing.JComboBox<String> Neibhour_country_combo;
    private javax.swing.JComboBox<Integer> Number_armies_Combo;
    private javax.swing.JButton btnPhases;
    private javax.swing.JPanel Phases_panel;
    private javax.swing.JList<String> Player_Jlist;
    private javax.swing.JPanel Player_Panel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelPhases;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel labelPlayerTitle;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration

    private DefaultListModel<String> listModelPlayers;
    private DefaultComboBoxModel<String> comboModelCountries;
    private DefaultComboBoxModel<Integer> comboModelNoOfArmies;

    private ReinforcementController reinforcementController = new ReinforcementController();

    private int reinforcementArmyAllocated = -1;

    /**
     *
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
     *
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
     *
     */
    public RiskMainInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        jScrollPane1 = new JScrollPane();
        Image_Panel = new JPanel();
        jLabel9 = new JLabel();
        Dice_Panel = new JPanel();
        jLabel1 = new JLabel();
        DiceValue = new JButton();
        jScrollPane2 = new JScrollPane();
        Dice_Jlist = new JList<>();
        Phases_panel = new JPanel();
        labelPhases = new JLabel();
        btnPhases = new JButton();
        Number_armies_Combo = new JComboBox<>();
        Country_combo = new JComboBox<>();
        Neibhour_country_combo = new JComboBox<>();
        Card_panel = new JPanel();
        jLabel3 = new JLabel();
        Card_A_button = new JButton();
        Card_B_button = new JButton();
        Card_C_button = new JButton();
        Card_D_button = new JButton();
        Card_E_button = new JButton();
        Player_Panel = new JPanel();
        jScrollPane3 = new JScrollPane();
        Player_Jlist = new JList<>();
        labelPlayerTitle = new JLabel();
        jLabel5 = new JLabel();
        Gameplay_panel = new JPanel();
        jLabel6 = new JLabel();
        jLabel7 = new JLabel();
        jScrollPane4 = new JScrollPane();
        Gameplay_Jlist = new JList<>();
        jLabel4 = new JLabel();

        listModelPlayers = new DefaultListModel<>();
        comboModelCountries = new DefaultComboBoxModel<>();
        comboModelNoOfArmies = new DefaultComboBoxModel<>();

        try {
            if (this.holder.bmpFile != null)
                this.mapImage = ImageIO.read(this.holder.bmpFile);

        } catch (IOException ioe) {
            ioe.printStackTrace();
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel9.setIcon(new javax.swing.ImageIcon(mapImage)); // NOI18N

        javax.swing.GroupLayout Image_PanelLayout = new javax.swing.GroupLayout(Image_Panel);
        Image_Panel.setLayout(Image_PanelLayout);
        Image_PanelLayout.setHorizontalGroup(
            Image_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Image_PanelLayout.createSequentialGroup()
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(572, 572, 572))
        );
        Image_PanelLayout.setVerticalGroup(
            Image_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(Image_Panel);

        jLabel1.setText("Dice");

        DiceValue.setText("Value");

        Dice_Jlist.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {" "};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane2.setViewportView(Dice_Jlist);

        javax.swing.GroupLayout Dice_PanelLayout = new javax.swing.GroupLayout(Dice_Panel);
        Dice_Panel.setLayout(Dice_PanelLayout);
        Dice_PanelLayout.setHorizontalGroup(
            Dice_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Dice_PanelLayout.createSequentialGroup()
                    .addGroup(Dice_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Dice_PanelLayout.createSequentialGroup()
                            .addGroup(Dice_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(Dice_PanelLayout.createSequentialGroup()
                                    .addGap(56, 56, 56)
                                    .addComponent(jLabel1))
                                .addGroup(Dice_PanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(DiceValue, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(0, 118, Short.MAX_VALUE))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addContainerGap())
        );
        Dice_PanelLayout.setVerticalGroup(
            Dice_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Dice_PanelLayout.createSequentialGroup()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(DiceValue)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .addContainerGap())
        );

        labelPhases.setText("Phases :");

        btnPhases.setText("Phases :");

        Country_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{" "}));

        Neibhour_country_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{" "}));

        javax.swing.GroupLayout Phases_panelLayout = new javax.swing.GroupLayout(Phases_panel);
        Phases_panel.setLayout(Phases_panelLayout);
        Phases_panelLayout.setHorizontalGroup(
            Phases_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Phases_panelLayout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(labelPhases, javax.swing.GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(Phases_panelLayout.createSequentialGroup()
                    .addComponent(btnPhases)
                    .addGap(18, 18, 18)
                    .addComponent(Number_armies_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(Phases_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Neibhour_country_combo, 0, 47, Short.MAX_VALUE)
                    .addComponent(Country_combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Phases_panelLayout.setVerticalGroup(
            Phases_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Phases_panelLayout.createSequentialGroup()
                    .addComponent(labelPhases)
                    .addGap(26, 26, 26)
                    .addGroup(Phases_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnPhases)
                        .addComponent(Number_armies_Combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(Neibhour_country_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Country_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(22, Short.MAX_VALUE))
        );

        jLabel3.setText("Card");

        Card_A_button.setText("Card 1");
        Card_A_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card_A_buttonActionPerformed(evt);
            }
        });

        Card_B_button.setText("Card 2");

        Card_C_button.setText("Card 3");

        Card_D_button.setText("Card 4");
        Card_D_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card_D_buttonActionPerformed(evt);
            }
        });

        Card_E_button.setText("Card 5");

        javax.swing.GroupLayout Card_panelLayout = new javax.swing.GroupLayout(Card_panel);
        Card_panel.setLayout(Card_panelLayout);
        Card_panelLayout.setHorizontalGroup(
            Card_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Card_panelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(Card_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Card_panelLayout.createSequentialGroup()
                            .addGap(46, 46, 46)
                            .addComponent(jLabel3)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(Card_panelLayout.createSequentialGroup()
                            .addGroup(Card_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Card_A_button, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                                .addComponent(Card_C_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(Card_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Card_B_button, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                                .addComponent(Card_D_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                            .addComponent(Card_E_button, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
        );
        Card_panelLayout.setVerticalGroup(
            Card_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Card_panelLayout.createSequentialGroup()
                    .addComponent(jLabel3)
                    .addGap(18, 18, 18)
                    .addGroup(Card_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Card_A_button)
                        .addComponent(Card_B_button)
                        .addComponent(Card_E_button))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(Card_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Card_C_button)
                        .addComponent(Card_D_button))
                    .addGap(0, 8, Short.MAX_VALUE))
        );

        Player_Jlist.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {" "};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane3.setViewportView(Player_Jlist);

        labelPlayerTitle.setText("Player :");

        javax.swing.GroupLayout Player_PanelLayout = new javax.swing.GroupLayout(Player_Panel);
        Player_Panel.setLayout(Player_PanelLayout);
        Player_PanelLayout.setHorizontalGroup(
            Player_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Player_PanelLayout.createSequentialGroup()
                    .addGroup(Player_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Player_PanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(Player_PanelLayout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(labelPlayerTitle)))
                    .addContainerGap(15, Short.MAX_VALUE))
        );
        Player_PanelLayout.setVerticalGroup(
            Player_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Player_PanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(labelPlayerTitle)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(28, Short.MAX_VALUE))
        );

        jLabel5.setText("Map");

        jLabel7.setText("             Gameplay   :");

        Gameplay_Jlist.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {" "};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane4.setViewportView(Gameplay_Jlist);

        javax.swing.GroupLayout Gameplay_panelLayout = new javax.swing.GroupLayout(Gameplay_panel);
        Gameplay_panel.setLayout(Gameplay_panelLayout);
        Gameplay_panelLayout.setHorizontalGroup(
            Gameplay_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Gameplay_panelLayout.createSequentialGroup()
                    .addGroup(Gameplay_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Gameplay_panelLayout.createSequentialGroup()
                            .addGap(145, 145, 145)
                            .addComponent(jLabel6)
                            .addGap(38, 38, 38)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(Gameplay_panelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Gameplay_panelLayout.setVerticalGroup(
            Gameplay_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Gameplay_panelLayout.createSequentialGroup()
                    .addGroup(Gameplay_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Gameplay_panelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel6))
                        .addComponent(jLabel7))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setText("MAP :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Phases_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Dice_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Card_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(38, 38, 38)
                                    .addComponent(Player_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addGap(505, 505, 505)
                            .addComponent(jLabel5))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(Gameplay_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Card_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(22, 22, 22)
                                    .addComponent(Player_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Dice_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Phases_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(Gameplay_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1)))
                    .addContainerGap())
        );

        initValues();
        initListeners();

        setVisible(true);
        pack();
    }

    public void initValues() {
        listModelPlayers.removeAllElements();

        for (Player player : holder.getPlayerList()) {
            listModelPlayers.addElement(player.getName() + " (" + player.getColor() + ")");
        }

        Player_Jlist.setEnabled(false);

        Player_Jlist.setModel(listModelPlayers);

        setPhasesValues();

        initPlayerTurn();
    }

    public void initPlayerTurn() {
        String currentPlayerName = holder.getActivePlayer().getName();
        labelPlayerTitle.setText("Player: (turn: " + currentPlayerName + ")");

        comboModelNoOfArmies.removeAllElements();

        this.loadCountryListInCombo();

        Number_armies_Combo.setModel(comboModelNoOfArmies);
    }

    public void loadCountryListInCombo() {
        comboModelCountries.removeAllElements();
        Player player = holder.getActivePlayer();

        comboModelCountries.addElement("No country");

        for (Map.Entry<String, Integer> countryName : player.getCountriesConquered().entrySet()) {
            comboModelCountries.addElement(countryName.getValue() + " - " + countryName.getKey());
        }

        Country_combo.setModel(comboModelCountries);
    }

    public void setPhasesValues() {
        switch (holder.currentPhase) {
            case DataHolder.REINFORCEMENT_PHASE:
                labelPhases.setText("Reinforcement Phase");
                btnPhases.setText("Attack");
                this.reinforcementArmyAllocated = 0;
                Neibhour_country_combo.setVisible(false);
                break;
            case DataHolder.ATTACK_PHASE:
                labelPhases.setText("Attack Phase");
                btnPhases.setText("Fortify");
                break;
            case DataHolder.FORTIFICATION_PHASE:
                labelPhases.setText("Fortification Phase");
                Neibhour_country_combo.setVisible(true);
                btnPhases.setText("Done!");
                break;
        }
    }

    public void changePhase() {
        holder.changePhases();
        setPhasesValues();
        initPlayerTurn();
    }

    private void initListeners() {
        Country_combo.addActionListener((ActionEvent e) -> {
            switch (holder.currentPhase) {
                case DataHolder.REINFORCEMENT_PHASE:
                    calculateReinforcementPhase();
                    break;
            }
        });

        btnPhases.addActionListener((ActionEvent e) -> {
            String actionCommands = btnPhases.getActionCommand();

            switch (actionCommands) {
                case REINFORCEMENT_ADD_ARMY_ACTION:
                    addArmyInReinforcementPhase();
                    break;
                case SWITCH_PHASE:
                    this.changePhase();
                    break;
            }
        });
    }

    /** Add selected number of armies to the country in reinforcement phase */
    private void addArmyInReinforcementPhase() {
        int selectedCountry = Country_combo.getSelectedIndex();
        int selectedNoOfArmies = Number_armies_Combo.getSelectedIndex();

        if ((selectedCountry == -1) || (selectedNoOfArmies == -1))
            return;

        String country = comboModelCountries.getElementAt(selectedCountry);
        int noOfArmies = comboModelNoOfArmies.getElementAt(selectedNoOfArmies);

        Player player = holder.getActivePlayer();
        country = country.split("-")[1].trim();
        int existingArmies = player.getArmiesInCountry(country);

        player.updateCountry(country, noOfArmies + existingArmies);

        holder.updatePlayer(player);
        this.reinforcementArmyAllocated += noOfArmies;

        loadCountryListInCombo();
        calculateReinforcementPhase();
    }

    /** Calculate number of armies to assign in reinforcement phase */
    private void calculateReinforcementPhase() {
        comboModelNoOfArmies.removeAllElements();

        if (Country_combo.getSelectedIndex() == -1)
            return;

        if (Country_combo.getSelectedIndex() > 0) {
            int totalNumberOfArmies = reinforcementController.calculateReinformentArmies(holder.playerTurn);
            int noOfArmies = totalNumberOfArmies - this.reinforcementArmyAllocated;

            System.out.println("Number of armies: " + noOfArmies);

            if (noOfArmies == 0)
                prepareForPhaseChange();
            else {
                for (int i = 1; i <= noOfArmies; i++) {
                    comboModelNoOfArmies.addElement(i);
                }

                btnPhases.setText("Add");
                btnPhases.setActionCommand(REINFORCEMENT_ADD_ARMY_ACTION);
            }
        } else
            prepareForPhaseChange();

        Number_armies_Combo.setModel(comboModelNoOfArmies);
    }

    private void prepareForPhaseChange() {
        btnPhases.setText("Attack");
        btnPhases.setActionCommand(SWITCH_PHASE);
    }

    private void Card_A_buttonActionPerformed(java.awt.event.ActionEvent evt) {

    }

    private void Card_D_buttonActionPerformed(java.awt.event.ActionEvent evt) {

    }

    public static void createInstance(Views playerInfoGUI) {
        if (mainView == null) {
            mainView = new RiskMainInterface();
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub

    }

}
